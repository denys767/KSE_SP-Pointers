#include <iostream>
using namespace std;
/*
Усе через ПОІНТЕРи!!!  якщо "не пішло", тоді через індекси, а потім спробуйте замінити індекси на ПОІНТЕРи

pt = (int*)realloc( void* ps, size_t sz);
переросподіл памяті з адреси ps і копіює sz Байт - повертає нову адресу to pt

Завдання 1
Інтервал [a;b] - надрукувати числа кратні N

Завдання 2
збільшити єлементи масива на 1
2.а - реверс масива в цей же масив

Завдання 3
Написати функцію, яка отримує як аргумент покажчики на два масиви (А і В) і розміри масивів. Функція перевіряє, чи є масив В підмножиною масиву А, і повертає покажчик на початок знайденого фрагмента або повертає 0 у протилежному випадку.

Завдання 4
Написати функцію, яка отримує покажчик на динамічний масив і його розмір. Функція повинна видалити з масиву всі від'ємні числа і повернути покажчик на новий динамічний масив.

Завдання 5
Створити функцію, що дозволяє додавати блок елементів у кінець масиву. (перевиклик №6?)

Завдання 6
Створити функцію, що дозволяє вставляти блок елементів, починаючи з довільного індексу масиву.

Завдання 7
Створити функцію, що дозволяє видаляти блок елементів, починаючи з довільного індексу масиву.
---
1. Негативні значення переставити назад масива, позитивні - уперед, нулі посередині. - в цьому ж масиві! службовий не використовувати.
{-9 8 0 9 4 -3 0 7 }  наприклад { 894700 -9 -3} або як вийшло
гарно б знати допоки у мене позитивні, зкуда починаються негативні

2. Дано два масиви, упорядковані за зростанням: А[n] та B[m]. Сформуйте масив C[n+m], що складається
з елементів масивів А і В, упорядкований за зростанням. Використовуйте синтаксис покажчиків.

3. Дано два масиви: А[n] і B[m]. Необхідно створити масиви, у яких зібрати:
3.1 Елементи обох масивів;
3.2 Загальні елементи двох масивів;
3.3 Елементи масиву A, які не включаються до B;
3.4 Елементи масиву B, які не включаються до A;
3.5 Елементи масивів A і B, які не є загальними для них

може тут вдастся скористатися простішими завданнями для складніших

4. переробити стару задачу в поінтерах - знайти в масиві перший позитивний та останній негативний єлементи, відсортувати єлементи між ними.*/

int task1() {
    //Інтервал [a;b] - надрукувати числа кратні N. Використати поінтери.
    int a = 1, b=100, n=3;
    int *pB = &b;
    int *pA = &a;
    cout << "Кратні " << n << " числа в інтервалі [" << *pA << ";" << *pB << "]: ";
    while (*pA <= *pB) {
        if (*pA % n == 0) {
            cout << *pA << " ";
        }
        *pA += 1;
    }
}

int task2() {
    //збільшити єлементи масива на 1
    //реверс масива в цей же масив
    int a[10] = {1,2,3,4,5,6,7,8,9,10};
    int *pA = a;
    cout << "Масив: ";
    for (int i = 0; i < 10; i++) {
        cout << *pA << " ";
        *pA += 1;
    }
    cout << endl;
    pA = a;
    cout << "Масив після збільшення на 1: ";
    for (int i = 0; i < 10; i++) {
        cout << *pA << " ";
        *pA -= 1;
    }
    cout << endl;
    pA = a;
    cout << "Масив після реверсу: ";
    for (int i = 0; i < 10; i++) {
        cout << *pA << " ";
        *pA += 1;
    }
    cout << endl;
}

int task3() {
    //Написати функцію, яка отримує як аргумент покажчики на два масиви (А і В) і розміри масивів. Функція перевіряє, чи є масив В підмножиною масиву А, і повертає покажчик на початок знайденого фрагмента або повертає 0 у протилежному випадку.
    int a[10] = {1,2,3,4,5,6,7,8,9,10};
    int b[5] = {3,4,5,6,7};
    int *pA = a;
    int *pB = b;
    int *pC = pA;
    int n = 10;
    int m = 5;
    for (int i = 0; i < n; i++) {
        if (*pA == *pB) {
            pC = pA;
            for (int j = 0; j < m; j++) {
                if (*pA == *pB) {
                    pA++;
                    pB++;
                } else {
                    break;
                }
            }
        }
        pA++;
    }
    if (pC == pA) {
        cout << "Масив В не є підмножиною масиву А" << endl;
    } else {
        cout << "Масив В є підмножиною масиву А" << endl;
    }
}

int task4() {
    /*Завдання 4
Написати функцію, яка отримує покажчик на динамічний масив і його розмір. Функція повинна видалити з масиву всі від'ємні числа і повернути покажчик на новий динамічний масив.*/
    int n = 10;
    int *a = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = i - 5;
    }
    int *pA = a;
    cout << "Масив: ";
    for (int i = 0; i < n; i++) {
        cout << *pA << " ";
        *pA += 1;
    }
    cout << endl;
    pA = a;
    int m = 0;
    for (int i = 0; i < n; i++) {
        if (*pA >= 0) {
            m++;
        }
        *pA += 1;
    }
    int *b = new int[m];
    pA = a;
    int *pB = b;
    for (int i = 0; i < n; i++) {
        if (*pA >= 0) {
            *pB = *pA;
            pB++;
        }
        *pA += 1;
    }
    cout << "Масив без від'ємних чисел: ";
    pB = b;
    for (int i = 0; i < m; i++) {
        cout << *pB << " ";
        *pB += 1;
    }
    cout << endl;
}

int task5() {
    //Створити функцію, що дозволяє додавати блок елементів у кінець масиву.
    int n = 10;
    int *a = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = i;
    }
    int *pA = a;
    cout << "Масив: ";
    for (int i = 0; i < n; i++) {
        cout << *pA << " ";
        *pA += 1;
    }
    cout << endl;
    pA = a;
    int m = 5;
    int *b = new int[m];
    for (int i = 0; i < m; i++) {
        b[i] = i + 10;
    }
    int *pB = b;
    int *c = new int[n + m];
    int *pC = c;
    for (int i = 0; i < n; i++) {
        *pC = *pA;
        pC++;
        *pA += 1;
    }
    for (int i = 0; i < m; i++) {
        *pC = *pB;
        pC++;
        *pB += 1;
    }
    cout << "Масив після додавання блоку елементів: ";
    pC = c;
    for (int i = 0; i < n + m; i++) {
        cout << *pC << " ";
        *pC += 1;
    }
    cout << endl;
}

int task6() {
    //Створити функцію, що дозволяє вставляти блок елементів, починаючи з довільного індексу масиву.
    int n = 10;
    int *a = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = i;
    }
    int *pA = a;
    cout << "Масив: ";
    for (int i = 0; i < n; i++) {
        cout << *pA << " ";
        *pA += 1;
    }
    cout << endl;
    pA = a;
    int m = 5;
    int *b = new int[m];
    for (int i = 0; i < m; i++) {
        b[i] = i + 10;
    }
    int *pB = b;
    int *c = new int[n + m];
    int *pC = c;
    int k = 3;
    for (int i = 0; i < k; i++) {
        *pC = *pA;
        pC++;
        *pA += 1;
    }
    for (int i = 0; i < m; i++) {
        *pC = *pB;
        pC++;
        *pB += 1;
    }
    for (int i = k; i < n; i++) {
        *pC = *pA;
        pC++;
        *pA += 1;
    }
    cout << "Масив після вставки блоку елементів: ";
    pC = c;
    for (int i = 0; i < n + m; i++) {
        cout << *pC << " ";
        *pC += 1;
    }
    cout << endl;
}

int task7() {
    //Створити функцію, що дозволяє видаляти блок елементів, починаючи з довільного індексу масиву.
    int n = 10;
    int *a = new int[n];
    for (int i = 0; i < n; i++) {
        a[i] = i;
    }
    int *pA = a;
    cout << "Масив: ";
    for (int i = 0; i < n; i++) {
        cout << *pA << " ";
        *pA += 1;
    }
    cout << endl;
    pA = a;
    int m = 5;
    int *b = new int[m];
    for (int i = 0; i < m; i++) {
        b[i] = i + 10;
    }
    int *pB = b;
    int *c = new int[n + m];
    int *pC = c;
    int k = 3;
    for (int i = 0; i < k; i++) {
        *pC = *pA;
        pC++;
        *pA += 1;
    }
    for (int i = 0; i < m; i++) {
        *pC = *pB;
        pC++;
        *pB += 1;
    }
    for (int i = k + m; i < n; i++) {
        *pC = *pA;
        pC++;
        *pA += 1;
    }
    cout << "Масив після видалення блоку елементів: ";
    pC = c;
    for (int i = 0; i < n + m; i++) {
        cout << *pC << " ";
        *pC += 1;
    }
    cout << endl;
}


